// Top-level build file where you can add configuration options common to all sub-projects/modules.

import com.square.buildsrc.BuildPlugins
import com.square.buildsrc.Libs
import com.square.buildsrc.Versions

buildscript {
    ext.kotlin_version = '1.3.61'

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven{ url'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath BuildPlugins.androidGradle
        classpath BuildPlugins.kotlinGradle
        classpath BuildPlugins.kSerializationGradle
        classpath BuildPlugins.mavenPublishPluginGradle
        classpath Libs.AndroidX.Navigation.safeArgsGradle
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {

    repositories {
        google()
        mavenCentral()
        jcenter()
        maven{ url'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jitpack.io" }
        mavenLocal()
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                def group = details.requested.group
                def name = details.requested.name

                if (group == 'org.jetbrains.kotlin' && name.startsWith('kotlin-stdlib')) {
                    details.useVersion Versions.kotlin
                } else if (group == 'org.jetbrains' && name.startsWith('annotations')) {
                    details.useVersion "17.0.0"
                } else if (group == 'com.google.code.findbugs' && name.startsWith('jsr305')) {
                    details.useVersion "3.0.2"
                } else if (group == 'org.reactivestreams' && name.startsWith('reactive-streams')) {
                    details.useVersion "1.0.2"
                } else if (group == 'com.google.errorprone' && name.startsWith('error_prone_annotations')) {
                    details.useVersion "2.3.3"
                } else if (group == 'com.google.auto.value') {
                    details.useVersion Libs.AutoValue.version
                } else if (group == 'androidx.fragment') {
                    details.useVersion Libs.AndroidX.Fragment.version
                } else if (group == 'com.square') {
                    details.useVersion Libs.Square.version
                }
            }
        }
    }

    plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
        plugin.extension.compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    tasks.withType(JavaCompile).configureEach { task ->
        task.sourceCompatibility = JavaVersion.VERSION_1_8
        task.targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
        task.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
        task.kotlinOptions {
            freeCompilerArgs += [
                    '-XXLanguage:+NewInference',
                    '-progressive',
                    '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                    '-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi',
                    '-Xuse-experimental=kotlin.time.ExperimentalTime',
            ]
        }
    }

    tasks.withType(Test) {
        testLogging {
            events "skipped", "failed", "passed"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def gitSha() {
    def f = new File(buildDir, "commit-sha.txt")
    if (!f.exists()) {
        def p = 'git rev-parse HEAD'.execute([], project.rootDir)
        if (p.waitFor() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }
        f.parentFile.mkdirs()
        f.text = p.text.trim()
    }
    return f.text.trim()
}

def gitTimestamp() {
    def f = new File(buildDir, "commit-timestamp.txt")
    if (!f.exists()) {
        def p = 'git log -n 1 --format=%at'.execute([], rootDir)
        if (p.waitFor() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }
        f.parentFile.mkdirs()
        f.text = p.text.trim()
    }
    return f.text.trim()
}

def propertyOrEmpty(String name) {
    return hasProperty(name) ? getProperty(name) : ''
}